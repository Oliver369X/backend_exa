// Prisma schema for User model

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String   @id @default(uuid())
  email                String   @unique
  passwordHash         String
  name                 String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  passwordResetToken   String?   // For password recovery
  passwordResetExpires DateTime?

  // Project relations
  ownedProjects        Project[]        @relation("Project_owner")
  lockedProjects       Project[]        @relation("LockedBy")
  projectPermissions   ProjectPermission[] @relation("ProjectPermission_user")
  createdVersions      ProjectVersion[] @relation("ProjectVersion_createdBy")
  collaboratedProjects  Project[]        @relation("ProjectCollaborator")
  recoveryTokens       PasswordRecoveryToken[]
}

model PasswordRecoveryToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean   @default(false)
  createdAt DateTime  @default(now())
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  ownerId     String
  owner       User     @relation("Project_owner", fields: [ownerId], references: [id])
  isArchived  Boolean  @default(false)
  designData  Json?    // Added field for current design state
  lockedById  String?  // user id who locked
  lockedBy    User?    @relation("LockedBy", fields: [lockedById], references: [id])
  lockedAt    DateTime?
  permissions ProjectPermission[]
  versions    ProjectVersion[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  linkAccess String   @default("none") // 'none' | 'read' | 'write' (nivel de acceso por enlace)
  linkToken  String?  // token único para el link compartido
  html        String?
  css         String?
  js          String?
  components  Json?
  assets      Json?
  collaborators User[]  @relation("ProjectCollaborator")
  pages         Page[]    @relation("ProjectPages")
}

model ProjectPermission {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation("ProjectPermission_user", fields: [userId], references: [id])
  userId    String
  permission String  // 'read' | 'write'

  @@unique([projectId, userId])
}

model ProjectVersion {
  id          String   @id @default(uuid())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  createdBy   User     @relation("ProjectVersion_createdBy", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  comment     String?
  snapshot    Json
}

model Page {
  id          String    @id @default(uuid())
  clientId    String    // ID generado por el cliente para sincronización
  name        String
  html        String?
  css         String?
  components  Json?     // Almacena la estructura de componentes GrapesJS
  isDefault   Boolean   @default(false) // Indica si es la página principal
  isDeleted   Boolean   @default(false) // Borrado lógico
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   String
  project     Project   @relation("ProjectPages", fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, clientId]) // Garantiza que clientId sea único dentro del proyecto
  @@index([projectId, isDeleted]) // Índice para buscar páginas no eliminadas por proyecto
}
